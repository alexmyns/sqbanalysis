import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
fig = make_subplots(rows=1, cols=3)


# –ó–∞–≥—Ä—É–∑–∏ –¥–∞–Ω–Ω—ã–µ
df = pd.read_csv(r'train.csv', sep=';')

# ctgrs = [col.value_counts().reset_index() for col in df.columns]

arr = ['age', 'job', 'marital', 'education', 'default', 'balance', 'housing',
       'loan', 'contact', 'day', 'month', 'duration', 'campaign', 'pdays',
       'previous', 'poutcome', 'y']

df_marital_counts = df['marital'].value_counts().reset_index()
df_marital_counts.columns = ['Marital-Status', 'Count']
df_education_counts = df['education'].value_counts().reset_index()
df_education_counts.columns = ['Education', 'Count']
df_default_counts = df['default'].value_counts().reset_index()
df_default_counts.columns = ['Default', 'Count']
df_loan_counts = df['loan'].value_counts().reset_index()
df_loan_counts.columns = ['Loan', 'Count']
df_housing_counts = df['housing'].value_counts().reset_index()
df_housing_counts.columns = ['Housing', 'Count']
df_poutcome_counts = df['poutcome'].value_counts().reset_index()
df_poutcome_counts.columns = ['Poutcome', 'Count']
df_previous_counts = df['previous'].value_counts().reset_index()
df_previous_counts.columns = ['Previous', 'Count']
df_contact_counts = df['contact'].value_counts().reset_index()
df_contact_counts.columns = ['Contact', 'Count']
df_month_counts = df['month'].value_counts().reset_index()
df_month_counts.columns = ['Month', 'Count']


st.title("üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–∞")

# Sidebar - –≤—ã–±–æ—Ä –∞–Ω–∞–ª–∏–∑–∞
analysis_type = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
    [
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
        "–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã",
        "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
        "–ö—Ä–µ–¥–∏—Ç—ã & –∑–∞–π–º—ã",
        "–¢–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞",
        "–ú–µ—Å—è—Ü –∫–æ–Ω—Ç–∞–∫—Ç–∞",
        "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏",
        "–í–ª–∏—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π",
        "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º",
        "–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –ø–æ –º–µ—Å—è—Ü–∞–º",
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é",
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é",
        "–†–æ–ª—å –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö",
        "–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º",
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ housing, personal loan –∏ default",
        "–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç",
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏",
        "Heatmap –ø—Ä–æ—Ñ–µ—Å—Å–∏—è vs —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        # "Term Deposits vs Previous Campaign Outcome",
        # "Deposits by Month",
    ]
)

if analysis_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É":
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –≤–∫–ª–∞–¥")
    fig = px.histogram(
        df,
        x="age",
        color="y",  # —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ yes/no
        nbins=30,
        barmode='overlay',
        opacity=0.7,
        color_discrete_map={"yes": "limegreen", "no": "lightgray"},
        labels={'y': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥'},
        category_orders={"y": ["no", "yes"]},
    )

    mean_age = df["age"].mean()
    fig.add_vline(
        x=mean_age,
        line_dash="dash",
        line_color="black",
        annotation_text=f"–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {round(mean_age, 2)}",
        annotation_position="top right"
    )

    fig.update_layout(
        legend_title_text='–ü–æ–¥–ø–∏—Å–∫–∞',
        legend=dict(
            y=0.95,
            x=0.75,
            bgcolor='rgba(255,255,255,0.7)',
            bordercolor='Black',
            borderwidth=1
        )
    )

    st.plotly_chart(fig, use_container_width=True)

    st.markdown(f"""
    **Insight üìä:**  
    - –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: **{round(mean_age, 2)}** –ª–µ—Ç.  
    - –ù–∞–∏–±–æ–ª—å—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —É –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Ç 30 –¥–æ 55 –ª–µ—Ç.
    - –ö–ª–∏–µ–Ω—Ç—ã –º–ª–∞–¥—à–µ 30 –∏ —Å—Ç–∞—Ä—à–µ 60 —Ä–µ–∂–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è.
    - –ú–æ–ª–æ–¥—ã–µ –ª—é–¥–∏ –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∞–º–∏.
    """)

elif analysis_type == "–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã":
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã")

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–µ
    job_subscribe_counts = df.groupby(
        ['job', 'y']).size().reset_index(name='Count')

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ (y)
    fig = px.bar(
        job_subscribe_counts,
        x='job',
        y='Count',
        color='y',
        barmode='group',
        text='Count',
        color_discrete_map={"yes": "limegreen", "no": "lightgray"},
        category_orders={"y": ["no", "yes"]},
        labels={'y': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥', 'job': '–¢–∏–ø —Ä–∞–±–æ—Ç—ã'},
    )
    fig.update_traces(textposition='outside')
    fig.update_layout(
        xaxis_title='–¢–∏–ø —Ä–∞–±–æ—Ç—ã',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
        legend_title_text='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥',
        legend=dict(
            y=0.95,
            x=0.75,
            bgcolor='rgba(255,255,255,0.7)',
            bordercolor='Black',
            borderwidth=1
        )
    )

    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    **Insight üìä:**  
    - –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö blue-collar –∏ management.
    - –í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –≤ management, technician –∏ entrepreneur.
    - –ì—Ä—É–ø–ø—ã —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: student –∏ housemaid.
    - –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å –≤—ã—Å–æ–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π ‚Äî —Ç–∞–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞.
    """)

elif analysis_type == "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ":
    st.header("–ê–Ω–∞–ª–∏–∑ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é
    df_marital_counts = df['marital'].value_counts().reset_index()
    df_marital_counts.columns = ['Marital Status', 'Count']

    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å –¥—ã—Ä–∫–æ–π (donut)
    fig = px.pie(
        df_marital_counts,
        names='Marital Status',
        values='Count',
        hole=0.5,
        color_discrete_sequence=['HotPink', 'LightSeaGreen', 'SlateBlue'],
    )
    fig.update_traces(
        marker=dict(line=dict(color='#000000', width=1.4)),
        textposition='outside',
        textinfo='percent+label'
    )
    st.plotly_chart(fig, use_container_width=True)

    total_clients = df.shape[0]
    married_pct = (df_marital_counts.loc[df_marital_counts['Marital Status']
                   == 'married', 'Count'].values[0] / total_clients) * 100
    single_pct = (df_marital_counts.loc[df_marital_counts['Marital Status']
                  == 'single', 'Count'].values[0] / total_clients) * 100
    divorced_pct = (df_marital_counts.loc[df_marital_counts['Marital Status']
                    == 'divorced', 'Count'].values[0] / total_clients) * 100

    st.markdown(f"""
    **Insight üìä:**  
    - –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî married (~60%).
    - –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç —á—É—Ç—å –≤—ã—à–µ —É single –∏ divorced.
    - –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Å–≤–µ–Ω–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥–∏–±–∫–æ—Å—Ç–∏.
    """)

elif analysis_type == "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
    st.header("–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    df_education_counts = df['education'].value_counts().reset_index()
    df_education_counts.columns = ['Education', 'Count']

    col1, col2 = st.columns(2)

    with col1:
        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        fig_bar = px.bar(
            df_education_counts,
            x='Education',
            y='Count',
            color='Education',
            text='Count',
            template='plotly_white',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'
        )
        fig_bar.update_traces(marker=dict(
            line=dict(color='#000000', width=1.4)))
        fig_bar.update_layout(showlegend=False)
        st.plotly_chart(fig_bar, use_container_width=True)

    with col2:
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (donut)
        fig_pie = px.pie(
            df_education_counts,
            names='Education',
            values='Count',
            hole=0.5,
            template='plotly_white',
            title='–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è'
        )
        fig_pie.update_traces(marker=dict(line=dict(color='#000000', width=1.4)),
                              textposition='outside', textinfo='percent+label')
        # fig_pie.update_layout(title_x=0.5)
        st.plotly_chart(fig_pie, use_container_width=True)

    # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤
    total_clients = df.shape[0]
    primary_pct = (df_education_counts.loc[df_education_counts['Education'] == 'primary', 'Count'].values[0] /
                   total_clients) * 100 if 'primary' in df_education_counts['Education'].values else 0
    secondary_pct = (df_education_counts.loc[df_education_counts['Education'] == 'secondary', 'Count'].values[0] /
                     total_clients) * 100 if 'secondary' in df_education_counts['Education'].values else 0
    tertiary_pct = (df_education_counts.loc[df_education_counts['Education'] == 'tertiary', 'Count'].values[0] /
                    total_clients) * 100 if 'tertiary' in df_education_counts['Education'].values else 0
    unknown_pct = (df_education_counts.loc[df_education_counts['Education'] == 'unknown', 'Count'].values[0] /
                   total_clients) * 100 if 'unknown' in df_education_counts['Education'].values else 0

    st.markdown(f"""
    **Insight üìä:**  
    - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Äî secondary (—Å—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ).
    - –ù–∞–∏–±–æ–ª—å—à–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è —Å—Ä–µ–¥–∏ tertiary (–≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ).
    - –ö–ª—é—á–µ–≤–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ: –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ‚Üí –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º –≤–∫–ª–∞–¥–∞–º.
    """)

elif analysis_type == "–ö—Ä–µ–¥–∏—Ç—ã & –∑–∞–π–º—ã":
    # st.header("–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∑–∞–π–º–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤")

    # –ü–æ–¥—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è default, housing –∏ loan
    df_default_counts = df['default'].value_counts()
    df_housing_counts = df['housing'].value_counts()
    df_loan_counts = df['loan'].value_counts()

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∞ –æ–¥–Ω–æ–º —Ö–æ–ª—Å—Ç–µ
    fig = make_subplots(rows=1, cols=3, specs=[[{"type": "pie"}, {"type": "pie"}, {"type": "pie"}]],
                        subplot_titles=('–ö—Ä–µ–¥–∏—Ç –≤ –¥–µ—Ñ–æ–ª—Ç–µ', '–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫—Ä–µ–¥–∏—Ç', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç'))

    fig.add_trace(go.Pie(
        labels=df_default_counts.index,
        values=df_default_counts.values,
        hole=0.6,
        marker_colors=['Crimson', 'ForestGreen'],
        showlegend=False
    ), row=1, col=1)

    fig.add_trace(go.Pie(
        labels=df_housing_counts.index,
        values=df_housing_counts.values,
        hole=0.6,
        marker_colors=['Crimson', 'ForestGreen'],
        showlegend=False
    ), row=1, col=2)

    fig.add_trace(go.Pie(
        labels=df_loan_counts.index,
        values=df_loan_counts.values,
        hole=0.6,
        marker_colors=['Crimson', 'ForestGreen'],
        showlegend=True
    ), row=1, col=3)

    fig.update_layout(
        title_text='–ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∑–∞–π–º–æ–≤',
        title_x=0.5,
        template='simple_white',
        showlegend=True
    )

    fig.update_traces(hoverinfo='value',textinfo='percent+label',textposition='inside', marker=dict(line=dict(width=0.003)))

    st.plotly_chart(fig, use_container_width=True)

    # –ò–Ω—Å–∞–π—Ç—ã
    st.markdown("""
    **Insight üìä:**  
    - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –∏–º–µ—é—Ç housing loan –∏ personal loan.
    - –¢–µ, –∫—Ç–æ –∏–º–µ–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã, –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ä–µ–∂–µ.
    - –≠—Ç–æ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –∫—Ä–µ–¥–∏—Ç—ã –æ—Ç–Ω–∏–º–∞—é—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –≥–∏–±–∫–æ—Å—Ç—å.
    """)

elif analysis_type == "–¢–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞":
    st.header("–¢–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
    
    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    df_contact_counts = df["contact"].value_counts().reset_index()
    df_contact_counts.columns = ["Contact", "Count"]
    
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    fig = px.pie(
        df_contact_counts,
        names="Contact",
        values="Count",
        hole=0.5,
        template="simple_white",
        color_discrete_sequence=["#FF6347", "#00BFFF", "#32CD32"]
    )
    fig.update_traces(
        marker=dict(line=dict(color='#000000', width=1.4)),
        textposition='outside',
        textinfo='percent+label'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("""
    **Insight üìä:**  
    - –î–≤–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞: cellular –∏ telephone.
    - –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã—à–µ —É –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —á–µ—Ä–µ–∑ cellular ‚Äî –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.
    """)

elif analysis_type == "–ú–µ—Å—è—Ü –∫–æ–Ω—Ç–∞–∫—Ç–∞":
    st.header("–ú–µ—Å—è—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    
    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
    df_month_counts = df["month"].value_counts().reset_index()
    df_month_counts.columns = ["Month", "Count"]
    
    # –ë–∞—Ä-—á–∞—Ä—Ç –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    fig = px.bar(
        df_month_counts.sort_values(by="Month"),
        x="Month",
        y="Count",
        color="Month",
        text="Count",
        template="simple_white",
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    fig.update_traces(marker=dict(line=dict(color="#000000", width=1.2)))
    
    st.plotly_chart(fig, use_container_width=True)    
    st.markdown("""
    **Insight üìä:**  
    - –ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ‚Äî –≤ may –∏ jul.
    - –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã—à–µ –≤ –∑–∏–º–Ω–µ-–≤–µ—Å–µ–Ω–Ω–∏–µ –º–µ—Å—è—Ü—ã (mar, apr) ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–µ–µ –≥–æ—Ç–æ–≤—è—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É –≤ —ç—Ç–æ –≤—Ä–µ–º—è.
    """)

elif analysis_type == "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏":
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏")
    
    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏
    df_poutcome_counts = df["poutcome"].value_counts().reset_index()
    df_poutcome_counts.columns = ["Poutcome", "Count"]
    
    col1, col2 = st.columns(2)
    with col1:
        # –ë–∞—Ä-—á–∞—Ä—Ç
        fig_bar = px.bar(
            df_poutcome_counts,
            x="Poutcome",
            y="Count",
            color="Poutcome",
            text="Count",
            template="simple_white",
            color_discrete_sequence=["grey", "red", "blue", "green"]
        )
        fig_bar.update_traces(marker=dict(line=dict(color="#000000", width=1.2)))
        st.plotly_chart(fig_bar, use_container_width=True)
    with col2:
        # –ü–∞–π-—á–∞—Ä—Ç
        fig_pie = px.pie(
            df_poutcome_counts,
            names="Poutcome",
            values="Count",
            hole=0.5,
            template="simple_white",
            color_discrete_sequence=["grey", "red", "blue", "green"]
        )
        fig_pie.update_traces(marker=dict(line=dict(color="#000000", width=1.4)),
                              textposition="outside", textinfo="percent+label")
        st.plotly_chart(fig_pie, use_container_width=True)
    
    st.markdown("""
    **Insight üìä:**  
    - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ä–∞–Ω–µ–µ –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –∏–ª–∏ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å (nonexistent, failure).
    - –¢–µ, —É –∫–æ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞–º–ø–∞–Ω–∏—è –±—ã–ª–∞ success, —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤–Ω–æ–≤—å.
    """)

elif analysis_type == "–í–ª–∏—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π":
    st.header("–í–ª–∏—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.markdown("""
    - **previous**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–µ–π.
    - **pdays**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∏–ª–∏ -1, –µ—Å–ª–∏ –Ω–µ —Å–≤—è–∑—ã–≤–∞–ª–∏—Å—å).
    """)
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ previous
    fig_previous = px.histogram(
        df, x="previous",
        nbins=20, color_discrete_sequence=["Teal"],
        title="<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
    )
    fig_previous.update_layout(title_x=0.5)
    st.plotly_chart(fig_previous, use_container_width=True)
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ pdays (–∏—Å–∫–ª—é—á–∞–µ–º -1)
    fig_pdays = px.histogram(
        df[df["pdays"] != -1],
        x="pdays",
        nbins=20, color_discrete_sequence=["SlateBlue"],
        title="<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (pdays)"
    )
    fig_pdays.update_layout(title_x=0.5)
    st.plotly_chart(fig_pdays, use_container_width=True)
    
    # Insight
    st.markdown("""
    **Insight üìä:**  
    - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (—É—Å–ø–µ—Ö —Ä–∞–Ω–µ–µ) ‚Üí –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.
    - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—à–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.
    """)

elif analysis_type == "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º":
    st.header("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    avg_balance_by_job = df.groupby('job', as_index=False)['balance'].mean()
    avg_balance_by_job['balance'] = avg_balance_by_job['balance'].round(1)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–∞–Ω—Å—É
    avg_balance_by_job = avg_balance_by_job.sort_values(by='balance', ascending=False)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig = px.bar(
        avg_balance_by_job,
        x='job',
        y='balance',
        text='balance',
        color='job',
        template='ggplot2',
        title='<b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã</b>'
    )
    fig.update_traces(marker=dict(line=dict(color='#000000', width=1.2)))
    fig.update_layout(title_x=0.5, showlegend=False, xaxis_title='–¢–∏–ø —Ä–∞–±–æ—Ç—ã', yaxis_title='–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å')
    st.plotly_chart(fig, use_container_width=True)
    
    # Insight
    st.markdown("""
    **Insight üìä:**  
    - –ù–∞–∏–±–æ–ª—å—à–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å —É management –∏ self-employed.
    - –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å —É blue-collar –∏ housemaid.
    - –ë–∞–ª–∞–Ω—Å ‚Äî –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ.
    """)

elif analysis_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é":
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é")
    
    fig = px.box(
        df,
        x='marital',
        y='age',
        color='marital',
        template='simple_white',
        color_discrete_sequence=['HotPink', 'LightSeaGreen', 'SlateBlue']
    )
    
    st.plotly_chart(fig, use_container_width=True)    
    # Insight
    st.markdown("""
    **Insight üìä:**  
    - Married ‚Äî –±–æ–ª–µ–µ —Å—Ç–∞—Ä—à–∏–µ –∫–ª–∏–µ–Ω—Ç—ã.
    - Single ‚Äî —á–∞—â–µ –º–æ–ª–æ–¥—ã–µ.
    - –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —É divorced –º–µ–¥–∏–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á—É—Ç—å –≤—ã—à–µ.
    """)

elif analysis_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é":
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é")
    
    fig = px.box(
        df,
        x='education',
        y='age',
        color='education',
        template='simple_white',
        title='<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</b>'
    )
    
    fig.update_layout(title_x=0.5, legend_title_text="<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    st.plotly_chart(fig, use_container_width=True)
    
    # Insight
    st.markdown("""
    **Insight üìä:**  
    - –ë–æ–ª–µ–µ –º–æ–ª–æ–¥—ã–µ ‚Äî –≤ –≥—Ä—É–ø–ø–µ secondary.
    - –°—Ç–∞—Ä—à–∏–µ ‚Äî —á–∞—â–µ –≤ primary.
    - –í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–æ —É –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã 30-50 –ª–µ—Ç.
    """)

elif analysis_type == "–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –ø–æ –º–µ—Å—è—Ü–∞–º":
    st.header("–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –ø–æ –º–µ—Å—è—Ü–∞–º")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    deposits_by_month = df.groupby(['month', 'y'], as_index=False)['age'].count().rename(columns={'age': 'Count'})
    deposits_by_month['percent'] = round(deposits_by_month['Count'] * 100 / deposits_by_month.groupby('month')['Count'].transform('sum'), 1)
    deposits_by_month['percent'] = deposits_by_month['percent'].apply(lambda x: f'{x}%')

    # –ì—Ä–∞—Ñ–∏–∫
    fig = px.bar(
        deposits_by_month,
        x='month',
        y='Count',
        text='percent',
        color='y',
        barmode='group',
        template='simple_white',
        color_discrete_sequence=['MediumPurple', 'YellowGreen']
    )
    fig.update_layout(
        title_x=0.5,
        showlegend=True,
        legend_title_text="Deposit",
        title_text='<b style="color:black; font-size:100%;">–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –ø–æ –º–µ—Å—è—Ü–∞–º'
    )

    st.plotly_chart(fig, use_container_width=True)

    # Insight
    st.markdown("""
    **Insightüìä:**  
    - –ü–æ–¥–ø–∏—Å–∫–∏ –≤—ã—à–µ –≤ mar, apr, jun.
    - –ú–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –≥–æ–¥–∞.
    """)

elif analysis_type == "–†–æ–ª—å –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö":
    st.header("–†–æ–ª—å housing/personal loan –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç")
    
    # Housing loan
    a = df.groupby(['housing', 'y'], as_index=False).size().rename(columns={'size':'Count'})
    fig1 = px.bar(
        a, x='housing', y='Count', color='y', barmode='group',
        title="<b>Housing Loan vs Deposits</b>", template='simple_white',
        color_discrete_sequence=['MediumPurple', 'YellowGreen']
    )
    
    # Personal loan
    b = df.groupby(['loan', 'y'], as_index=False).size().rename(columns={'size':'Count'})
    fig2 = px.bar(
        b, x='loan', y='Count', color='y', barmode='group',
        title="<b>Personal Loan vs Deposits</b>", template='simple_white',
        color_discrete_sequence=['MediumPurple', 'YellowGreen']
    )
    
    col1, col2 = st.columns(2)
    with col1: st.plotly_chart(fig1, use_container_width=True)
    with col2: st.plotly_chart(fig2, use_container_width=True)
    
    st.markdown("""
    **Insightüìä:**
    - –ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤ housing/personal —á–∞—â–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è.
    - –ù–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–∞ ‚Äî –≤—ã—Å–æ–∫–∞—è –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞.
    """)

elif analysis_type == "–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º":
    st.header("–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫—É age_group
    df['age_group'] = pd.cut(df['age'], bins=[18, 25, 35, 45, 55, 100],
                              labels=['18-25', '26-35', '36-45', '46-55', '56+'])
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    a = df.groupby(['age_group', 'y'], as_index=False).size().rename(columns={'size':'Count'})
    
    fig = px.bar(
        a, x='age_group', y='Count', color='y', barmode='group',
        template='simple_white', color_discrete_sequence=['MediumPurple', 'YellowGreen']
    )
    
    fig.update_layout(title_x=0.5, title_text="<b>Deposits by Age Group")
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("""
    **Insightüìä:**  
    - –ì—Ä—É–ø–ø–∞ 26-35 –∏ 36-45 ‚Äî –ª–∏–¥–µ—Ä—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º.
    - –ú–æ–ª–æ–¥—ã–µ (–¥–æ 25) –∏ —Å—Ç–∞—Ä—à–∏–µ (56+) ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
    """)

elif analysis_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ housing, personal loan –∏ default":
    st.header("Housing, Personal Loan –∏ Credit in Default")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        fig1 = px.pie(
            df, names='housing', title='Housing Loan', hole=0.5,
            color_discrete_sequence=['LightSeaGreen', 'HotPink']
        )
        fig1.update_traces(marker=dict(line=dict(color='#000', width=1.2)), textinfo='percent+label')
        st.plotly_chart(fig1, use_container_width=True)
    
    with col2:
        fig2 = px.pie(
            df, names='loan', title='Personal Loan', hole=0.5,
            color_discrete_sequence=['SlateBlue', 'Orange']
        )
        fig2.update_traces(marker=dict(line=dict(color='#000', width=1.2)), textinfo='percent+label')
        st.plotly_chart(fig2, use_container_width=True)
    
    with col3:
        fig3 = px.pie(
            df, names='default', title='Credit in Default', hole=0.5,
            color_discrete_sequence=['MediumPurple', 'YellowGreen']
        )
        fig3.update_traces(marker=dict(line=dict(color='#000', width=1.2)), textinfo='percent+label')
        st.plotly_chart(fig3, use_container_width=True)
    
    st.markdown("""
    **Insightüìä:**  
    - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –∏–º–µ—é—Ç housing –∏–ª–∏ personal loan.
    - –û—á–µ–Ω—å –º–∞–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å default ‚Äî –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞–¥–µ–∂–Ω–æ–π –±–∞–∑—ã.
    """)

elif analysis_type == "–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç":
    st.header("Balance vs –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç")
    
    fig = px.box(
        df, x='y', y='balance', color='y', template='simple_white',
        color_discrete_sequence=['MediumPurple', 'YellowGreen']
    )
    fig.update_layout(title_x=0.5, title_text="<b>Balance vs Deposit Subscription</b>")
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("""
    **Insightüìä:**  
    - –í—ã—Å–æ–∫–∏–π –±–∞–ª–∞–Ω—Å ‚Üí –≤—ã—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.
    - –¢–µ, –∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å.
    """)

elif analysis_type == "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏":
    st.header("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    fig = px.box(
        df, x='y', y='duration', color='y', template='simple_white',
        color_discrete_sequence=['MediumPurple', 'YellowGreen']
    )
    fig.update_layout(title_x=0.5, title_text="<b>Duration of Call vs Deposit Subscription</b>")
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("""
    **Insightüìä:**  
    - –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ (–¥–æ–ª—å—à–µ 300 —Å–µ–∫—É–Ω–¥) ‚Üí –≤—ã—à–µ —à–∞–Ω—Å –ø–æ–¥–ø–∏—Å–∫–∏.
    - –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–≤–æ–Ω–∫–∏ —á–∞—â–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –æ—Ç–∫–∞–∑—É.
    """)

elif analysis_type == "Heatmap –ø—Ä–æ—Ñ–µ—Å—Å–∏—è vs —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ":
    st.header("–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è")
    
    crosstab = pd.crosstab(df['job'], df['marital'])
    
    fig = px.imshow(
        crosstab, text_auto=True, color_continuous_scale='Viridis',
        title="<b>Heatmap: Job vs Marital Status"
    )
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("""
    **Insightüìä:**  
    - –ß—ë—Ç–∫–æ –≤–∏–¥–Ω–æ, —á—Ç–æ management –∏ technician ‚Äî –ª–∏–¥–µ—Ä—ã —Å—Ä–µ–¥–∏ married.
    - blue-collar –±–æ–ª—å—à–µ —Å—Ä–µ–¥–∏ married, single ‚Äî —á–∞—â–µ student.
    """)




